[pipeline:main]
pipeline = request_id {% if server_middleware is defined and server_middleware == 'True' %}server_cookie {% endif %}api

[app:api]
use = egg:openprocurement.api
couchdb.db_name = {{ couchdb_db }}
couchdb.url = http://{{ parts['couchdb.ini'].username + ':' + parts['couchdb.ini'].password + '@' if parts['couchdb.ini'].username else '' }}{{ parts['couchdb.ini'].host}}:{{ parts['couchdb.ini'].port}}/
{% if 'admin_username' in parts['couchdb.ini'] %}
couchdb.admin_url = http://{{ parts['couchdb.ini'].admin_username + ':' + parts['couchdb.ini'].admin_password + '@' if 'username' in parts['couchdb.ini'] else '' }}{{ parts['couchdb.ini'].host}}:{{ parts['couchdb.ini'].port}}/
{% endif %}
{% if 'reader_username' in parts['couchdb.ini'] %}
couchdb.reader_username = {{ parts['couchdb.ini'].reader_username}}
{% endif %}
{% if 'reader_password' in parts['couchdb.ini'] %}
couchdb.reader_password = {{ parts['couchdb.ini'].reader_password}}
{% endif %}
auth.file = {{ auth_file }}
pyramid.reload_templates = {{ debug }}
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.debug_templates = {{ debug }}
pyramid.default_locale_name = en
pyramid.default_locale_name = en
exclog.extra_info = true
{% if health_threshold is defined %}
health_threshold = {{ health_threshold }}
{% endif %}
{% if update_after is defined %}
update_after = {{ update_after }}
{% endif %}
{% if plugins is defined %}
plugins = {{ plugins }}
{% endif %}
{% if subscribers_newrequest is defined %}
subscribers.newrequest = {{ subscribers_newrequest }}
{% endif %}
{% if aws_access_key is defined %}
aws.s3_bucket = {{ aws_s3_bucket }}
aws.access_key = {{ aws_access_key }}
aws.secret_key = {{ aws_secret_key }}
{% endif %}
{% if docservice_upload_url is defined %}
docservice_upload_url = {{ docservice_upload_url }}
{% endif %}
{% if docservice_url is defined %}
docservice_url = {{ docservice_url }}
{% endif %}
{% if docservice_username is defined %}
docservice_username = {{ docservice_username }}
{% endif %}
{% if docservice_password is defined %}
docservice_password = {{ docservice_password }}
{% endif %}
{% if dockey is defined %}
dockey = {{ dockey }}
{% endif %}
{% if dockeys is defined %}
dockeys = {{ dockeys.replace('\n','\0') }}
{% endif %}
{% if api_version is defined %}
api_version = {{ api_version }}
{% endif %}
{% if id is defined %}
id = {{ id }}
{% endif %}
{% if debug == 'true' %}
filter-with = profile

[filter:profile]
use = egg:repoze.profile
log_filename = myapp.profile
cachegrind_filename = cachegrind.out.myapp
discard_first_request = true
path = /__profile__
flush_at_shutdown = true
unwind = false
{% endif %}
{% if debug == 'false' %}
filter-with = proxy-prefix

[filter:proxy-prefix]
use = egg:PasteDeploy#prefix
{% endif %}
[filter:request_id]
paste.filter_factory = request_id_middleware.middleware:RequestIdMiddleware.factory
env_request_id = REQUEST_ID
resp_header_request_id = X-Request-ID
{% if server_middleware is defined and server_middleware == 'True' %}

[filter:server_cookie]
paste.filter_factory = server_cookie_middleware.middleware:ServerCookieMiddleware.factory
cookie_name = SERVER_ID
{% endif %}


[server:main]
use = egg:chaussette
host = 0.0.0.0
port = 6543
backend = gevent

# Begin logging configuration

[loggers]
keys = root,openprocurement{{ ',exc_logger' if exc_logger is defined else ''}}

[handlers]
keys = console{{ ',loggly' if loggly is defined else ''}}{{ ',journal' if journal is defined else ''}}

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console{{ ',loggly' if loggly is defined else ''}}

[logger_openprocurement]
level = INFO
handlers = {% if journal is defined %}journal
{% endif %}
qualname = openprocurement

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic
{% if exc_logger is defined %}
[logger_exc_logger]
level = ERROR
handlers = {% if journal is defined %}journal
{% endif %}
qualname = exc_logger
propagate = 0
{% endif %}
{% if loggly is defined %}
[handler_loggly]
class = loggly.handlers.HTTPSHandler
args = ('https://logs-01.loggly.com/inputs/{{ loggly }}/tag/python,api/','POST')
{% endif %}
{% if journal is defined %}
[handler_journal]
class = ExtendedJournalHandler.ExtendedJournalHandler
args = ()
{% endif %}
[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s

# End logging configuration
